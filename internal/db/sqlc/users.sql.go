// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package sqlc

import (
	"context"

	"github.com/google/uuid"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*)
FROM users
WHERE (
  user_deleted_at IS NULL
  OR ($1::bool = TRUE AND user_deleted_at IS NOT NULL)
  OR ($1::bool = FALSE AND user_deleted_at IS NULL)
) AND (
  $2::TEXT IS NULL
  OR $2::TEXT = ''
  OR user_email ILIKE '%' || $2 || '%'
  OR user_fullname ILIKE '%' || $2 || '%'
)
`

type CountUsersParams struct {
	Deleted *bool   `json:"deleted"`
	Search  *string `json:"search"`
}

func (q *Queries) CountUsers(ctx context.Context, arg CountUsersParams) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers, arg.Deleted, arg.Search)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  user_email,
  user_password,
  user_fullname,
  user_age,
  user_status,
  user_level
) VALUES (
  $1, $2, $3, $4, $5, $6
) RETURNING user_id, user_uuid, user_email, user_password, user_fullname, user_age, user_status, user_level, user_created_at, user_updated_at, user_deleted_at
`

type CreateUserParams struct {
	UserEmail    string `json:"user_email"`
	UserPassword string `json:"user_password"`
	UserFullname string `json:"user_fullname"`
	UserAge      *int32 `json:"user_age"`
	UserStatus   int32  `json:"user_status"`
	UserLevel    int32  `json:"user_level"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserEmail,
		arg.UserPassword,
		arg.UserFullname,
		arg.UserAge,
		arg.UserStatus,
		arg.UserLevel,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserUuid,
		&i.UserEmail,
		&i.UserPassword,
		&i.UserFullname,
		&i.UserAge,
		&i.UserStatus,
		&i.UserLevel,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
		&i.UserDeletedAt,
	)
	return i, err
}

const getAllUsersUserCraetedAtAsc = `-- name: GetAllUsersUserCraetedAtAsc :many
SELECT user_id, user_uuid, user_email, user_password, user_fullname, user_age, user_status, user_level, user_created_at, user_updated_at, user_deleted_at
FROM users
WHERE user_deleted_at IS NULL
AND (
  $3::TEXT IS NULL
  OR $3::TEXT = ''
  OR user_email ILIKE '%' || $3 || '%'
  OR user_fullname ILIKE '%' || $3 || '%'
)
ORDER BY user_created_at ASC
LIMIT $1 OFFSET $2
`

type GetAllUsersUserCraetedAtAscParams struct {
	Limit  int32   `json:"limit"`
	Offset int32   `json:"offset"`
	Search *string `json:"search"`
}

func (q *Queries) GetAllUsersUserCraetedAtAsc(ctx context.Context, arg GetAllUsersUserCraetedAtAscParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsersUserCraetedAtAsc, arg.Limit, arg.Offset, arg.Search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserUuid,
			&i.UserEmail,
			&i.UserPassword,
			&i.UserFullname,
			&i.UserAge,
			&i.UserStatus,
			&i.UserLevel,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
			&i.UserDeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsersUserCreatedAtDesc = `-- name: GetAllUsersUserCreatedAtDesc :many
SELECT user_id, user_uuid, user_email, user_password, user_fullname, user_age, user_status, user_level, user_created_at, user_updated_at, user_deleted_at
FROM users
WHERE user_deleted_at IS NULL
AND (
  $3::TEXT IS NULL
  OR $3::TEXT = ''
  OR user_email ILIKE '%' || $3 || '%'
  OR user_fullname ILIKE '%' || $3 || '%'
)
ORDER BY user_created_at DESC
LIMIT $1 OFFSET $2
`

type GetAllUsersUserCreatedAtDescParams struct {
	Limit  int32   `json:"limit"`
	Offset int32   `json:"offset"`
	Search *string `json:"search"`
}

func (q *Queries) GetAllUsersUserCreatedAtDesc(ctx context.Context, arg GetAllUsersUserCreatedAtDescParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsersUserCreatedAtDesc, arg.Limit, arg.Offset, arg.Search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserUuid,
			&i.UserEmail,
			&i.UserPassword,
			&i.UserFullname,
			&i.UserAge,
			&i.UserStatus,
			&i.UserLevel,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
			&i.UserDeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsersUserIdAsc = `-- name: GetAllUsersUserIdAsc :many
SELECT user_id, user_uuid, user_email, user_password, user_fullname, user_age, user_status, user_level, user_created_at, user_updated_at, user_deleted_at
FROM users
WHERE user_deleted_at IS NULL
AND (
  $3::TEXT IS NULL
  OR $3::TEXT = ''
  OR user_email ILIKE '%' || $3 || '%'
  OR user_fullname ILIKE '%' || $3 || '%'
)
ORDER BY user_id ASC
LIMIT $1 OFFSET $2
`

type GetAllUsersUserIdAscParams struct {
	Limit  int32   `json:"limit"`
	Offset int32   `json:"offset"`
	Search *string `json:"search"`
}

func (q *Queries) GetAllUsersUserIdAsc(ctx context.Context, arg GetAllUsersUserIdAscParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsersUserIdAsc, arg.Limit, arg.Offset, arg.Search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserUuid,
			&i.UserEmail,
			&i.UserPassword,
			&i.UserFullname,
			&i.UserAge,
			&i.UserStatus,
			&i.UserLevel,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
			&i.UserDeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllUsersUserIdDesc = `-- name: GetAllUsersUserIdDesc :many
SELECT user_id, user_uuid, user_email, user_password, user_fullname, user_age, user_status, user_level, user_created_at, user_updated_at, user_deleted_at
FROM users
WHERE user_deleted_at IS NULL
AND (
  $3::TEXT IS NULL
  OR $3::TEXT = ''
  OR user_email ILIKE '%' || $3 || '%'
  OR user_fullname ILIKE '%' || $3 || '%'
)
ORDER BY user_id DESC
LIMIT $1 OFFSET $2
`

type GetAllUsersUserIdDescParams struct {
	Limit  int32   `json:"limit"`
	Offset int32   `json:"offset"`
	Search *string `json:"search"`
}

func (q *Queries) GetAllUsersUserIdDesc(ctx context.Context, arg GetAllUsersUserIdDescParams) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllUsersUserIdDesc, arg.Limit, arg.Offset, arg.Search)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.UserID,
			&i.UserUuid,
			&i.UserEmail,
			&i.UserPassword,
			&i.UserFullname,
			&i.UserAge,
			&i.UserStatus,
			&i.UserLevel,
			&i.UserCreatedAt,
			&i.UserUpdatedAt,
			&i.UserDeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, user_uuid, user_email, user_password, user_fullname, user_age, user_status, user_level, user_created_at, user_updated_at, user_deleted_at
FROM users
WHERE
  user_email = $1
  AND user_deleted_at IS NULL
`

func (q *Queries) GetUserByEmail(ctx context.Context, userEmail string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, userEmail)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserUuid,
		&i.UserEmail,
		&i.UserPassword,
		&i.UserFullname,
		&i.UserAge,
		&i.UserStatus,
		&i.UserLevel,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
		&i.UserDeletedAt,
	)
	return i, err
}

const getUserByUuid = `-- name: GetUserByUuid :one
SELECT user_id, user_uuid, user_email, user_password, user_fullname, user_age, user_status, user_level, user_created_at, user_updated_at, user_deleted_at
FROM users
WHERE
  user_uuid = $1
  AND user_deleted_at IS NULL
`

func (q *Queries) GetUserByUuid(ctx context.Context, userUuid uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByUuid, userUuid)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserUuid,
		&i.UserEmail,
		&i.UserPassword,
		&i.UserFullname,
		&i.UserAge,
		&i.UserStatus,
		&i.UserLevel,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
		&i.UserDeletedAt,
	)
	return i, err
}

const restoreUser = `-- name: RestoreUser :one
UPDATE users
SET
  user_deleted_at = NULL
WHERE
  user_uuid = $1::uuid
  AND user_deleted_at IS NOT NULL
RETURNING user_id, user_uuid, user_email, user_password, user_fullname, user_age, user_status, user_level, user_created_at, user_updated_at, user_deleted_at
`

func (q *Queries) RestoreUser(ctx context.Context, userUuid uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, restoreUser, userUuid)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserUuid,
		&i.UserEmail,
		&i.UserPassword,
		&i.UserFullname,
		&i.UserAge,
		&i.UserStatus,
		&i.UserLevel,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
		&i.UserDeletedAt,
	)
	return i, err
}

const softDeleteUser = `-- name: SoftDeleteUser :one
UPDATE users
SET
  user_deleted_at = now()
WHERE
  user_uuid = $1::uuid
  AND user_deleted_at IS NULL
RETURNING user_id, user_uuid, user_email, user_password, user_fullname, user_age, user_status, user_level, user_created_at, user_updated_at, user_deleted_at
`

func (q *Queries) SoftDeleteUser(ctx context.Context, userUuid uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, softDeleteUser, userUuid)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserUuid,
		&i.UserEmail,
		&i.UserPassword,
		&i.UserFullname,
		&i.UserAge,
		&i.UserStatus,
		&i.UserLevel,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
		&i.UserDeletedAt,
	)
	return i, err
}

const trashUser = `-- name: TrashUser :one
DELETE FROM users
WHERE
  user_uuid = $1::uuid
  AND user_deleted_at IS NOT NULL
RETURNING user_id, user_uuid, user_email, user_password, user_fullname, user_age, user_status, user_level, user_created_at, user_updated_at, user_deleted_at
`

func (q *Queries) TrashUser(ctx context.Context, userUuid uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, trashUser, userUuid)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserUuid,
		&i.UserEmail,
		&i.UserPassword,
		&i.UserFullname,
		&i.UserAge,
		&i.UserStatus,
		&i.UserLevel,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
		&i.UserDeletedAt,
	)
	return i, err
}

const updateUserByUuid = `-- name: UpdateUserByUuid :one
UPDATE users
SET
  user_password = COALESCE($1, user_password),
  user_fullname = COALESCE($2, user_fullname),
  user_age      = COALESCE($3, user_age),
  user_status   = COALESCE($4, user_status),
  user_level    = COALESCE($5, user_level)
WHERE
  user_uuid = $6::uuid
  AND user_deleted_at IS NULL
RETURNING user_id, user_uuid, user_email, user_password, user_fullname, user_age, user_status, user_level, user_created_at, user_updated_at, user_deleted_at
`

type UpdateUserByUuidParams struct {
	UserPassword *string   `json:"user_password"`
	UserFullname *string   `json:"user_fullname"`
	UserAge      *int32    `json:"user_age"`
	UserStatus   *int32    `json:"user_status"`
	UserLevel    *int32    `json:"user_level"`
	UserUuid     uuid.UUID `json:"user_uuid"`
}

func (q *Queries) UpdateUserByUuid(ctx context.Context, arg UpdateUserByUuidParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUserByUuid,
		arg.UserPassword,
		arg.UserFullname,
		arg.UserAge,
		arg.UserStatus,
		arg.UserLevel,
		arg.UserUuid,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.UserUuid,
		&i.UserEmail,
		&i.UserPassword,
		&i.UserFullname,
		&i.UserAge,
		&i.UserStatus,
		&i.UserLevel,
		&i.UserCreatedAt,
		&i.UserUpdatedAt,
		&i.UserDeletedAt,
	)
	return i, err
}
